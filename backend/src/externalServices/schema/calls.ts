/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/{appId}/sessions/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new PeerConnection */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description WebRTC application ID */
                    appId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        vary?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NewSessionResponse"] & unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{appId}/sessions/{sessionId}/tracks/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Solve the given track object(s) and add the track(s) to the WebRTC session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description WebRTC application ID */
                    appId: string;
                    /** @description Current PeerConnection session ID */
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TracksRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        vary?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TracksResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{appId}/sessions/{sessionId}/renegotiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** When a previous response has requiresImmediateRenegotiation, you must renegotiate */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description WebRTC application ID */
                    appId: string;
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    /** @example {
                     *       "sessionDescription": {
                     *         "sdp": "v=0\no=- 0 0 IN IP4 127.0.0.1\ns=-\nc=IN IP4 127.0.0.1\nt=0 0\nm=audio 4000 RTP/AVP 111\na=rtpmap:111 OPUS/48000/2\nm=video 4002 RTP/AVP 96\na=rtpmap:96 VP8/90000\n...\ntype: answer\n"
                     *       }
                     *     } */
                    "application/json": {
                        sessionDescription?: components["schemas"]["SessionDescription"];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        vary?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionDescription"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{appId}/sessions/{sessionId}/tracks/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Close a local or remote track */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description WebRTC application ID */
                    appId: string;
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CloseTracksRequest"] & unknown;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        vary?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CloseTracksResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{appId}/sessions/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the list of tracks associated to the session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description WebRTC application ID */
                    appId: string;
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        vary?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetSessionStateResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SessionDescription: {
            sdp?: string;
            /** @enum {string} */
            type?: "answer" | "offer";
        };
        TrackObject: {
            /**
             * @description If you want to share a track, it should be local. If you want to play a track shared by a remote agent, it should be remote
             * @enum {string}
             */
            location?: "local" | "remote";
            /** @description mid associated to track's transceiver. It should be set with local tracks only */
            mid?: string;
            /** @description Session ID of the track owner. It should be set for remote tracks only */
            sessionId?: string;
            /** @description Given name for the track */
            trackName?: string;
        };
        CloseTrackObject: {
            /** @description mid associated to the track's transceiver to close */
            mid?: string;
        };
        TracksRequest: {
            sessionDescription?: components["schemas"]["SessionDescription"];
            tracks?: components["schemas"]["TrackObject"][];
        };
        TracksResponse: {
            requiresImmediateRenegotiation?: boolean;
            sessionDescription?: components["schemas"]["SessionDescription"];
            tracks?: (components["schemas"]["TrackObject"] & {
                error?: {
                    errorCode?: string;
                    errorDescription?: string;
                };
            })[];
        };
        NewSessionRequest: {
            sessionDescription?: components["schemas"]["SessionDescription"];
        };
        NewSessionResponse: {
            sessionDescription?: {
                sdp?: string;
                /** @enum {string} */
                type?: "answer" | "offer";
            };
            sessionId?: string;
        };
        CloseTracksRequest: {
            sessionDescription?: components["schemas"]["SessionDescription"];
            tracks?: components["schemas"]["CloseTrackObject"][];
            /** @description True if you want to stop just the data flow for the tracks, no WebRTC renegotiation */
            force?: boolean;
        };
        CloseTracksResponse: {
            sessionDescription?: components["schemas"]["SessionDescription"];
            tracks?: (components["schemas"]["CloseTrackObject"] & {
                error?: {
                    errorCode?: string;
                    errorDescription?: string;
                };
            })[];
            requiresImmediateRenegotiation?: boolean;
        };
        GetSessionStateResponse: {
            tracks?: (components["schemas"]["TrackObject"] & {
                /** @enum {string} */
                status?: "active" | "inactive" | "waiting";
            })[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
